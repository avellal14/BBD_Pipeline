"""
Declare all global variables

Remember to change num_epochs
"""
import os

flags = dict()

# static folder
flags['annotation_folder'] = os.path.join('annotation_he_cell_segmentation_partial')
flags['experiment_folder'] = os.path.join('experiment_he_cell_segmentation_partial')

flags['annotation_images_folder'] = os.path.join(flags['annotation_folder'],'images')
flags['annotation_groundtruths_folder'] = os.path.join(flags['annotation_folder'],'groundtruths')
flags['annotation_groups_folder'] = os.path.join(flags['annotation_folder'],'groups')
flags['annotation_weights_folder'] = os.path.join(flags['annotation_folder'],'weights')
flags['annotation_tissues_folder'] = os.path.join(flags['annotation_folder'],'tissues')
flags['annotation_labels_folder'] = os.path.join(flags['annotation_folder'],'labels')
flags['annotation_coordinates_folder'] = os.path.join(flags['annotation_folder'],'coordinates')

###################################################################################
# static file extension
flags['image_ext'] = '.png'
flags['groundtruth_ext'] = '.png'
flags['label_ext'] = '.csv'
flags['coordinate_ext'] = '.mat'
flags['tissue_ext'] = '.png'
flags['group_ext'] = '.csv'
flags['weight_ext'] = '.png'

###################################################################################
# generate weight
sigma = 5.0

# prepare training, validation, test data
flags['dict_path'] = {'image':flags['annotation_images_folder'],
                      'groundtruth': flags['annotation_groundtruths_folder'],
                      'group': flags['annotation_groups_folder'],
                      'weight': flags['annotation_weights_folder']
                      # 'tissue':flags['annotation_tissues_folder']
                      }

flags['dict_ext'] = {'image':flags['image_ext'],
                     'groundtruth':flags['groundtruth_ext'],
                     'group':flags['group_ext'],
                     'weight':flags['weight_ext']
                     # 'tissue':flags['tissue_ext']
                     }

flags['split_method'] = 'perm'
# gen_train_val_method = 'coordinate'
flags['gen_train_val_method'] = 'sliding_window'

flags['num_split'] = 1
flags['augmentation_keyword'] = 'mod'
flags['test_percentage'] = 0.0
flags['val_percentage'] = 25.0

flags['size_input_patch'] = [256,256,3]
flags['size_output_patch'] = [256,256,1]
flags['stride'] = [40,40]
#flags['stride'] = [20,20]

flags['instance_proportion'] = {0: 0.5, 1: 0.5}

flags['n_jittering'] = 40

###################################################################################
# training

flags['num_preprocess_threads'] = 8
flags['gpu'] = '/gpu:0'
flags['min_fraction_of_examples_in_queue'] = 0.01
flags['gpu_memory_fraction'] = 1.0

flags['num_epochs'] = 300
# flags['num_epochs'] = 20 # change this back
flags['num_examples_per_epoch_for_train'] = 74008
# flags['num_examples_per_epoch_for_train'] = 100

flags['num_examples_per_epoch_for_val'] = int(flags['num_examples_per_epoch_for_train']*0.25)

flags['n_classes'] = 3
flags['alpha'] = 1.0

flags['batch_size'] = 8
# flags['batch_size'] = 32
flags['initial_learning_rate'] = 1e-4

# flags['pretrain_path'] = os.path.join('KS_lib', 'tf_model', 'vgg16_weights.npz')
flags['pretrain_path'] = []

###################################################################################
# test
flags['test_batch_size'] = 64
flags['stride_test'] = [192,192]
flags['test_model'] = 0
flags['test_image_list'] = os.path.join(flags['experiment_folder'],'perm1','val_image_list.csv') # os.path.join('C-TA-419','test_1q32_img.csv')
